name: 'Doge go brrrrÔ∏è üèç'

on:
  workflow_call:
    inputs:
      runs-on:
        description: "Platform to execute on."
        type: string
        default: 'ubuntu-latest'

      aws_region:
        description: "AWS Region to deploy to"
        type: string
        default: 'eu-west-3'

      deploy_unit:
        type: string
        description: "Path to the unit to deploy (eg. api, front, etc)"
        default: '.'

      environment:
        type: string
        required: true
        description: "GitHub environment to use"

jobs:
  deploy:
    runs-on: ${{ inputs.runs-on }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      TF_WORKDIR: "${{ inputs.deploy_unit }}/terraform"

    steps:
      - name: Checkout üõé
        uses: actions/checkout@v3

      - name: DogeOps Environment
        id: doge-env
        uses: WITH-Test/action-select-deploy-env@main
        with:
          deploy_unit: ${{ inputs.deploy_unit }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9

      - name: Terraform Init
        id: init
        run: |
          terraform -version
          terraform init \
            -backend-config="bucket=with-dogeops-terraform-state" \
            -backend-config="key=${{ steps.doge-env.outputs.unit }}/infra/${{ inputs.environment }}/${{ steps.doge-env.outputs.key }}/backend/terraform.tfstate" \
            -backend-config="region=${{ inputs.aws_region }}" \
            -backend-config="dynamodb_table=terraform-locks" \
            -backend-config="encrypt=true"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          echo "Planning terraform"
          terraform plan -no-color -input=false -out=tfplan.out

      - name: Terraform Summary
        id: comment
        uses: actions/github-script@v3
#        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: ${{ false }}
        run: |
          echo "Apply Terraform Plan"
