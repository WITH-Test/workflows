---
name: 'DogeOps : Python Lint'

on:
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        required: false
        type: string
        default: 'ubuntu-latest'
      project-folder:
        description: The folder containing the project to build
        type: string
        required: false
        default: .
      # original src
      PYTHON_VERSION:
        required: false
        type: string
        default: '3.10'
      DEPENDENCY_MANAGER:
        required: false
        type: string
        default: 'pip'  # or poetry, pipenv
      ENFORCE_PYLINT:
        required: false
        type: boolean
        default: true
      ENFORCE_ISORT:
        required: false
        type: boolean
        default: false
      ENFORCE_BLACK:
        required: false
        type: boolean
        default: true
      ENFORCE_FLAKE8:
        required: false
        type: boolean
        default: true
      ENFORCE_BANDIT:
        required: false
        type: boolean
        default: true
      PYLINT_CONFIG:
        required: false
        type: string
        default: ''
      # Will by default scan `.` if you want to configure it otherwise use `targets` stanza in config file
      # Important: Make sure to exclude `./venv` from scan paths!
      BANDIT_CONFIG:
        required: false
        type: string
        default: ''

jobs:
  lint:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.project-folder }}

    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v1
      id: setup-python
      with:
        python-version: ${{ inputs.PYTHON_VERSION }}

    - name: Get cache metadata
      id: cache-meta
      run: |
        CACHE_KEY=""
        CACHE_PATH=""

        if [ ${{ inputs.DEPENDENCY_MANAGER }} = 'pip' ]; then
          CACHE_KEY="venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/requirements.txt') }}"
          CACHE_PATH=$(pip cache dir)
        elif [ ${{ inputs.DEPENDENCY_MANAGER }} = 'poetry' ]; then
          CACHE_KEY="venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}"
          CACHE_PATH="./venv"
        elif [ ${{ inputs.DEPENDENCY_MANAGER }} = 'pipenv' ]; then
          CACHE_KEY="venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/Pipfile.lock') }}"
          CACHE_PATH="./venv"
        fi
        echo "::set-output name=cache-key::$CACHE_KEY"
        echo "::set-output name=cache-path::$CACHE_PATH"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      if: ${{ inputs.DEPENDENCY_MANAGER == 'poetry' }}
      with:
        virtualenvs-create: false
        virtualenvs-in-project: true
        virtualenvs-path: ${{ steps.cache-meta.outputs.cache-path }}

    - name: Load cached venv
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.cache-meta.outputs.cache-path }}
        key: ${{ steps.cache-meta.outputs.cache-key }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv venv
        source venv/bin/activate
        pip install pylint flake8 bandit pytest pytest-cov
        if [ ${{ inputs.DEPENDENCY_MANAGER }} = 'pip' ]; then
          pip install -r requirements.txt;
        elif [ ${{ inputs.DEPENDENCY_MANAGER }} = 'poetry' ]; then
          poetry install --no-root
        elif [ ${{ inputs.DEPENDENCY_MANAGER }} = 'pipenv' ]; then
          pip install pipenv
          pipenv install
        fi

    - name: Check imports (isort)
      uses: isort/isort-action@master
      with:
        sortPaths: ${{ inputs.project-folder }}
        configuration: "${{ inputs.ENFORCE_ISORT && '--check-only' || '' }} --diff --profile=black"

    - name: Check format (black)
      uses: psf/black@stable
      with:
        options: "--verbose ${{ inputs.ENFORCE_BLACK && '--check' || '' }}"

    - name: Enforce code style (flake8)
      # Will find config automatically in `setup.cfg`, `tox.ini`, or `.flake8` - https://flake8.pycqa.org/en/latest/user/configuration.html#configuration-locations
      run: |
        source venv/bin/activate
        flake8 ${{ inputs.ENFORCE_FLAKE8 && '' || '--exit-zero' }}

    - name: Lint code (pylint)
      # Will find config automatically in `pylintrc`, `.pylintrc`, `pyproject.toml`, NOT `setup.cfg` - https://pylint.pycqa.org/en/latest/user_guide/run.html#command-line-options
      run: |
        source venv/bin/activate
        PYLINT_CONDITIONAL_ARGS=()
        if [ -n "${{ inputs.PYLINT_CONFIG }}" ]; then
          PYLINT_CONDITIONAL_ARGS+=( --rcfile=${{ inputs.PYLINT_CONFIG }} )
        fi

        pylint **/*.py  ${{ inputs.ENFORCE_PYLINT && '' || '--exit-zero' }} "${PYLINT_CONDITIONAL_ARGS[@]}"

    - name: Code security check (bandit)
      # Will find config automatically in `.bandit`, others have to specified with --ini - see https://github.com/PyCQA/bandit/issues/396#issuecomment-475152672
      run: |
        source venv/bin/activate
        BANDIT_CONDITIONAL_ARGS=()
        if [ -n "${{ inputs.BANDIT_CONFIG }}" ]; then
          BANDIT_CONDITIONAL_ARGS+=( --exclude ./venv --ini ${{ inputs.BANDIT_CONFIG }} )
        else
          BANDIT_CONDITIONAL_ARGS+=( . --exclude ./venv )
        fi
        bandit -r ${{ inputs.ENFORCE_BANDIT && '' || '--exit-zero' }} "${BANDIT_CONDITIONAL_ARGS[@]}"
