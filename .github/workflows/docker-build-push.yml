name: 'DogeOps : Build image'

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Platform to execute on'
        required: false
        type: string
        default: 'ubuntu-latest'
      project-folder:
        description: 'The folder containing the project to build'
        required: false
        type: string
        default: '.'
      container_registry:
        description: 'defaults to ghcr.io (supports docker.io and ecr regex)'
        required: false
        type: string
        default: 'ghcr'
      container_repository:
        description: "in case of Docker Hub: username/image-name"
        required: false
        type: string
        default: ''
      AWS_REGION:
        description: "in case of AWS ECR"
        required: false
        type: string
        default: 'eu-west-3'

    secrets:
      AWS_ROLE_ARN:
        description: 'AWS Role ARN to assume (must exist)'
        required: false
      container_registry_username:
        description: 'Username for container registry'
        required: false
      container_registry_password:
        description: 'Password for container registry'
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  build:
    permissions:
      contents: read
      packages: write  # Push
      id-token: write  # AWS ECR
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Get repository accesses
      id: get-repo
      run: |
        REPO=""
        USERNAME=""
        PASSWORD=""
        REGISTRY=""
        PROVIDER=""
        if [ ${{ inputs.container_registry }} = 'ghcr.io' ]; then
          REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          USERNAME=${{ github.actor }}
          PASSWORD=${{ secrets.GITHUB_TOKEN }}
          PROVIDER="ghcr"
        elif [ -n $( ${{ inputs.container_registry }} | grep '^.*\.dkr\.ecr\..*$' ) ]; then
          REPO=${{ inputs.container_repository }}
          REGISTRY=${{ inputs.container_registry }}
          PROVIDER="ecr"
        else
          REGISTRY='docker.io'
          PROVIDER="docker"
          REPO=${{ inputs.container_repository }}
          USERNAME=${{ secrets.container_registry_username }}
          PASSWORD=${{ secrets.container_registry_password }}
        fi

        echo "::set-output name=registry::$REGISTRY"
        echo "::set-output name=provider::$PROVIDER"
        echo "::set-output name=repo::$REPO"
        echo "::set-output name=username::$USERNAME"
        echo "::set-output name=password::$PASSWORD"

#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v1
#      with:
#        install: true

    - name: Login to Container Registry
      if: steps.get-repo.outputs.provider != 'ecr'
      uses: docker/login-action@v1
      with:
        registry: ${{ steps.get-repo.outputs.registry }}
        username: ${{ steps.get-repo.outputs.username }}
        password: ${{ steps.get-repo.outputs.password }}

    - name: Configure AWS credentials
      if: steps.get-repo.outputs.provider == 'ecr'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.get-repo.outputs.provider == 'ecr'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate tags and image meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: |
           ${{ steps.get-repo.outputs.registry }}/${{ steps.get-repo.outputs.repo }}
        tags: |
          type=ref,event=tag
          type=sha

    - name: Build image
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.project-folder }}
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ steps.get-repo.outputs.registry }}/${{ steps.get-repo.outputs.repo }}:latest
        cache-to: type=registry,ref=${{ steps.get-repo.outputs.registry }}/${{ steps.get-repo.outputs.repo }}:latest,mode=max

    - name: Analyze image efficiency
      uses: MartinHeinz/dive-action@v0.1.3
      if: 0 == 1
      with:
        image: '${{ inputs.container_registry }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}'
        config: ${{ inputs.DIVE_CONFIG }}
        exit-zero: ${{ !inputs.ENFORCE_DIVE }}

    # The results of this scan should be pushed to GH security, but that's not free
    - name: Trivy vulnerability scan
      if: 0 == 1
      uses: aquasecurity/trivy-action@master
      id: image-scan
      with:
        image-ref: '${{ inputs.container_registry }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Push container image
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.project-folder }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=registry,ref=${{ inputs.container_registry }}/${{ steps.get-repo.outputs.repo }}:latest
        cache-to: type=registry,ref=${{ inputs.container_registry }}/${{ steps.get-repo.outputs.repo }}:latest,mode=max

    # run this only for prod
    # every image sign needs user intervention
    - name: Install cosign
      uses: sigstore/cosign-installer@main
      if: ${{ github.ref_type == 'tag' }}

    - name: Sign the published image
      if: ${{ github.ref_type == 'tag' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign sign ${{ inputs.container_registry }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}